@implements IDisposable

@using System.Diagnostics.CodeAnalysis

<div class="treeview-node @SelectedClass @CollapseClass">
    <div class="treeview-node-body @BodyClass">
        <span class="treeview-node-bullet" @onclick="@ToggleCollapsedAsync">&nbsp;</span>
        <span class="treeview-node-icon" @onclick="@SelectAsync" @ondblclick="@ToggleCollapsedAsync" />
        <span class="treeview-node-label" @onclick="@SelectAsync">@Label</span>
    </div>

    @if (ChildContent != null && !IsCollapsed)
    {
        <CascadingValue Value="this">
            <div class="treeview-node-children">
                @ChildContent
            </div>
        </CascadingValue>
    }
</div>

@code {
    [CascadingParameter]
    public TreeView? TreeView { get; set; }

    [CascadingParameter]
    public TreeNode? Parent { get; set; }

    [Parameter]
    public string BodyClass { get; set; } = string.Empty;

    [Parameter]
    public string Label { get; set; } = "TreeNode";

    [Parameter]
    public bool StartCollapsed { get; set; }

    [Parameter]
    public object? Data { get; set; }

    [Parameter]
    public EventCallback<TreeNodeSelectedEventArgs> Selected { get; set; }

    [Parameter]
    public EventCallback<TreeNodeSelectedEventArgs> Deselected { get; set; }

    [Parameter]
    public EventCallback<TreeNodeCollapseEventArgs> Collapsed { get; set; }

    [Parameter]
    public EventCallback<TreeNodeCollapseEventArgs> Expanded { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    public bool IsSelected =>
        TreeView?.SelectedNode == this;

    public bool IsCollapsed { get; private set; }

#if NETSTANDARD2_1
    [return: MaybeNull]
    public T GetData<T>() =>
        (Data is T data) ? data : default(T);
#else
    public T GetData<T>() =>
        (Data is T data) ? data : default(T)!;
#endif

    public async Task SelectAsync()
    {
        if (TreeView != null)
        {
            TreeNode? previous = TreeView.SelectedNode;
            await TreeView.SetSelectedNodeAsync(this);
            previous?.StateHasChanged();
        }
    }

    public async Task DeselectAsync()
    {
        if (TreeView != null)
        {
            TreeNode? selected = TreeView.SelectedNode;

            if (selected == this)
                await TreeView.SetSelectedNodeAsync(null);
        }
    }

    public async Task ToggleCollapsedAsync()
    {
        if (!IsCollapsed)
        {
            // Change the selection before collapsing the node to
            // prevent invalid state during the transition to collapsed
            bool? changeSelection = TreeView?
                .SelectedNode?
                .GetAncestors()
                .Contains(this);

            if (changeSelection == true)
                await SelectAsync();
        }

        IsCollapsed = !IsCollapsed;

        TreeNodeCollapseEventArgs args = new TreeNodeCollapseEventArgs(TreeView, this);

        if (IsCollapsed)
        {
            await (TreeView?.NodeCollapsed.InvokeAsync(args) ?? Task.CompletedTask);
            await Collapsed.InvokeAsync(args);
        }
        else
        {
            await (TreeView?.NodeExpanded.InvokeAsync(args) ?? Task.CompletedTask);
            await Expanded.InvokeAsync(args);
        }
    }

    public IEnumerable<TreeNode> GetAncestors()
    {
        TreeNode? ancestor = Parent;

        while (ancestor != null)
        {
            yield return ancestor;
            ancestor = ancestor.Parent;
        }
    }

    public void Dispose()
    {
        // Nothing can be done about the potential for
        // invalid state at this point; just deselect ASAP
        if (TreeView?.SelectedNode == this)
            _ = DeselectAsync();
    }

    // Only read StartCollapsed when the component is
    // initialized to prevent state from being overwritten
    // by renders or state changes in parent components
    protected override void OnInitialized() =>
        IsCollapsed = StartCollapsed;

    private string SelectedClass => IsSelected
        ? "treeview-node-selected"
        : string.Empty;

    private string CollapseClass
    {
        get
        {
            if (ChildContent == null)
                return string.Empty;

            return IsCollapsed
                ? "treeview-node-collapse"
                : "treeview-node-expand";
        }
    }
}
